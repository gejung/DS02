# -*- coding: utf-8 -*-
"""Luba and Geeyoun template_DS002_rollingdice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ACSIIM_kEBKVWCPlVmQVd368AVgNpX_

# Lucky Gas
Adapted from https://introductorystats.wordpress.com/2011/10/16/rolling-dice-to-buy-gas/

![](https://www.evernote.com/l/ADP-B9kwuA1Cuo78RbzLVomU54jkJPkO1wYB/image.png)

Imagine that there is a gas station in Los Vegas called **1-Die**. The price per gallon you pay at this gas station is determined by the roll of a die. Get lucky and pay only one dollar per gallon! Roll a six? That will be $6 per gallon. 

Down the street is a competitor called **2-Dice**. The price you pay there is determined by the average of two dice. For example, if the roll of two dice results in 3 and 5, the price per gallon would be $4. 

**Questions**
Assume that you buy gasoline 50 weeks out of the year, and that you put 10 gallons into the tank on average.

Each station has an average of 100 customers per day, 365 days per year. 

1. What is the average price per gallon you will pay over the course of a year at each station? 
1. Is there an advantage to shopping at one station over another?
1. Is **2-Dice** making more money than **1-Die**?
1. What would happen if you allowed the customers to choose more dice?
1. Make plots to illustrate your findings.

# Setup
"""

from collections import Counter
import seaborn as sns

# Plotting cell
from matplotlib import pyplot as plt

# font
plt.rcParams.update({'font.size': 8})

# reset the default figsize value
plt.rcParams["figure.figsize"] = plt.rcParamsDefault["figure.figsize"]

# 144 is good for a high-resolution display. Try 100 if it's too big
plt.rcParams["figure.dpi"] = (120)

# Commented out IPython magic to ensure Python compatibility.
# Import your code from GitHub

# This is the root on Google Colab
# Use the magic %cd command to navigate around the file system
# %cd /content/

# Use `isdir()` to see if the repository is already here
from genericpath import isdir

# get your code
# Does the folder/directory exist?

# Clone the repository with the latest code
print("Clone the repo")
!git clone https://github.com/scrippscollege/DS_002.git dgoodwin

# %cd /content/dgoodwin
!git pull

# %cd /content/

"""# Custom functions"""

# DIce rolling functions
from random import randint, seed
seed()

def rollDie(sides=6):
  """Roll a fair die returning values from 1 to sides"""
  return randint(1,sides)

def rollDice(howmany=2):
  """Roll howmany fair die"""
  r = []
  for _ in range(howmany):
    r.append(rollDie())
  return mean(r)

def rollDieNtimes(n=50):
  """Roll one die n times"""
  ppg = []
  for _ in range(n):
    ppg.append(rollDie())
  return ppg

def rollDiceNtimes(n=50):
  """Roll two dice n times"""
  ppg = []
  for _ in range(n):
    ppg.append(rollDice())
  return ppg

def getMean(alist=[1,6]):
  return mean(alist)

rollDie(), rollDice(), rollDice(3), rollDice(30), rollDieNtimes(10), rollDiceNtimes(10)

"""# Let's generate a year of sales at **1-Die**"""

aYear = rollDieNtimes(n=36500)
# Sanity check
stats.mean(aYear), stats.median(aYear)

from collections import Counter

# Proper Currency formatting
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

freq = Counter(aYear)

print("| $gal | sales |")
print("|------|-------|")
for k in sorted(freq.keys()):
  print(f"| ${k}   | {freq[k]}  |")

print()
print(f"Mean price is ${stats.mean(aYear)}/gal")
print(f"Median price is ${stats.median(aYear)}/gal")

totalSales = 0
for k in freq.keys():
  totalSales = totalSales + (k * freq[k])

print(f"Total sales for the year: {locale.currency(totalSales, grouping=True)}")

import seaborn as sns
keys = sorted(dict(freq).keys())

vals = []
for k in keys:
  vals.append(dict(freq)[k])


# x = [d for d in range(len(aYear))]
sns.barplot(x=keys,y=vals)
plt.title("Distribution of customers and prices paid")
plt.show()

"""# How did the **2-Dice** station do?"""

# use rollDiceNtimes to simulate a year of sales
aYear = ...

# Your mean should be close to 3.5
stats.mean(aYear), stats.median(aYear)

# Output will look like this:
# (3.5048356164383563, 3.5)

# Create a dictionary called freq to count the frequency of each price paid


print("| $gal   | sales |")
print("|--------|-------|")
for k in sorted(freq.keys()):
  print(f"| ${k}   | {freq[k]}  |")

print()
print(f"Mean price is ${stats.mean(aYear)}/gal")
print(f"Median price is ${stats.median(aYear)}/gal")

# Calculate the total sales
totalSales = 0

print(f"Total sales for the year: {locale.currency(totalSales, grouping=True)}")


# Your output will look like this:

# | $gal   | sales |
# |--------|-------|
# | $1.0   | 1003  |
# | $1.5   | 2003  |
# | $2.0   | 3022  |
# | $2.5   | 3949  |
# | $3.0   | 5117  |
# | $3.5   | 6198  |
# | $4.0   | 5051  |
# | $4.5   | 4121  |
# | $5.0   | 3002  |
# | $5.5   | 2008  |
# | $6.0   | 1026  |

# Mean price is $3.5048356164383563/gal
# Median price is $3.5/gal
# Total sales for the year: $127,926.50

# Get a list of keys from the freq dictionary
# NOTE: you will need to sort the keys!
keys = 

# Get a list of corresponding values from the freq dictionary
vals = []


# Make a plot. Does it have the same shape as the 1-Die? plot?
sns.barplot(x=keys,y=vals)
plt.title("Number of customers over price paid per gallon")
plt.show()

"""# What was the customer's experience over the long run at **1-Die**?

![](https://www.evernote.com/l/ADPJiBroL-5HV7z_S4wlltv0u9BXH1R05KAB/image.png)

3 ROLL THE DIE 100 TIMES
"""

# This is a simulation -- use the die, try your luck!
twoYears = [6, 2, 6, 4, 2, 3, 6, 6, 2, ...
print(twoYears)

# stats.mean(aYear), stats.median(aYear)

paid = []
avg = []
totalcost = 0
for p in twoYears:
  totalcost = totalcost+(p*10)
  paid.append(p)
  avg.append(stats.mean(paid))

sns.lineplot(y=avg,x=[r for r in range(len(avg))])
plt.ylim(1, 6)
plt.title(f"Total Lucky 1-Die cost over 100 fill ups: {totalcost}")
plt.show()

"""# Customer experience at **2-Dice**?

## ROLL THE DICE 100x (or as many as you can stand)


"""

# Roll the dice! record it here
myrolls = [[1,2],[4,2],[6,6],[1,3],[4,4],[1,3],[4,6],[1,6],[4,2],[2,6],[1,5]
,[1,2],[5,3],[2,3],[6,6],[2,2],[4,6],[1,2],[1,3],[3,3],[1,3],[1,4],[5,6],[4,6]]
twoYearsDice = []

meanrolls = []
for sublist in myrolls:
  meanrolls.append((sublist[0] + sublist[1])/2)

print(meanrolls)


for r in myrolls:
  twoYearsDice.append(getMean(r))

print(twoYearsDice)

paid = []
avg = []
totalcost = 0
for p in twoYearsDice:
  totalcost = totalcost+(p*10)
  paid.append(p)
  avg.append(mean(paid))

sns.lineplot(y=avg,x=[r for r in range(len(avg))])
plt.ylim(1, 6)
plt.title(f"Total Lucky 2-Dice Gas cost over 100 fill ups: {totalcost}")
plt.show()

